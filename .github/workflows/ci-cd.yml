name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev
      - staging
      - main
permissions:
  contents: write 
jobs:
  # Step 1: Build and Test on Pull Request to Dev
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Navigate to the backend directory and install dependencies
      - name: Install backend dependencies
        working-directory: app/backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install  -r requirements.txt

      #start server 
      - name: Start API server 
        working-directory: app/backend
        run:  |
          source .venv/bin/activate
          uvicorn main:app --host 0.0.0.0 --port 8000 &
        env:
          BASE_URL: hhtp://127.0.0.1:8000  

      # Run integration tests
      - name: Run integration tests
        working-directory: app/backend
        run: |
          source .venv/bin/activate
          pytest ../../tests/test_api.py
        env:
          BASE_URL: http://127.0.0.1:8000

  # Step 2: Push Dev to Staging
  push-to-staging:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

    # Fetch the latest changes from the remote
      - name: Fetch latest changes
        run: git fetch origin staging

    # Merge staging into dev to avoid conflicts
      - name: Merge staging into dev
        run: |
          git checkout dev
          git merge origin/staging --no-edit --allow-unrelated-histories

    # Push the updated dev branch to staging
      - name: Push to staging branch
        run: git push origin dev:staging    

  # Step 3: Build and Test on Staging
  staging-tests:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python and run all tests
      - name: Run all tests
        working-directory: app/backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --no-cache-dir -r requirements.txt
          pytest ../../tests/test_api.py

      - name: Push to production
        run: git push origin staging:main

  # Step 4: Deploy on Main
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: staging-tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # login to docker hub
      - name: login to docker 
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      # Push Docker image to DockerHub
      - name: Build and push Docker image
        working-directory: app/backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/carbon_pred_backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/carbon_pred_backend:latest
      # Deploy to production (customize this section for your cloud platform
      - name: Deploy to production
        run: |
          echo "Deploying to cloud platform (e.g., AWS, GCP, Azure, etc.)"
